use super::Expr;

pub program -> Vec<Expr>
  = commands:(command*) { commands }

command -> Expr
  = c:add { c }
  / c:sub { c }
  / c:out { c }
  / c:in { c}
  / c:clear { c }
  / c:right { c }
  / c:left { c }
  / c:scan_right { c }
  / c:scan_left { c }
  / "[" commands:command* "]" { Expr::Loop(commands) }

right -> Expr
  = commands:">"+ { Expr::Right(commands.len()) }

left -> Expr
  = commands:"<"+ { Expr::Left(commands.len()) }

add -> Expr
  = c:add_pos_offset { c }
  / c:add_neg_offset { c }

add_pos_offset -> Expr
  = ">" c:add_pos_offset "<" { match c { Expr::Add(count, offset, _) => Expr::Add(count, offset + 1, true), _ => panic!("parse failed") } }
  / commands:"+"+ { Expr::Add(commands.len() as u8, 0, true) }

add_neg_offset -> Expr
  = "<" c:add_neg_offset ">" { match c { Expr::Add(count, offset, _) => Expr::Add(count, offset + 1, false), _ => panic!("parse failed") } }
  / commands:"+"+ { Expr::Add(commands.len() as u8, 0, false) }

sub -> Expr
  = c:sub_pos_offset { c }
  / c:sub_neg_offset { c }

sub_pos_offset -> Expr
  = ">" c:sub_pos_offset "<" { match c { Expr::Sub(count, offset, _) => Expr::Sub(count, offset + 1, true), _ => panic!("parse failed") } }
  / commands:"-"+ { Expr::Sub(commands.len() as u8, 0, true) }

sub_neg_offset -> Expr
  = "<" c:sub_neg_offset ">" { match c { Expr::Sub(count, offset, _) => Expr::Sub(count, offset + 1, false), _ => panic!("parse failed") } }
  / commands:"-"+ { Expr::Sub(commands.len() as u8, 0, false) }

clear -> Expr
  = clear_pos_offset
  / clear_neg_offset

clear_pos_offset -> Expr
  = ">" c:clear_pos_offset "<" { match c { Expr::Clear(offset, _) => Expr::Clear(offset + 1, true), _ => panic!("parse failed") } }
  / "[-]" { Expr::Clear(0, true) }
  / "[+]" { Expr::Clear(0, true) }

clear_neg_offset -> Expr
  = "<" c:clear_neg_offset ">" { match c { Expr::Clear(offset, _) => Expr::Clear(offset + 1, false), _ => panic!("parse failed") } }
  / "[-]" { Expr::Clear(0, false) }
  / "[+]" { Expr::Clear(0, false) }

out -> Expr
  = out_pos_offset
  / out_neg_offset

out_pos_offset -> Expr
  = ">" c:out_pos_offset "<" { match c { Expr::Out(offset, _) => Expr::Out(offset + 1, true), _ => panic!("parse failed") } }
  / "." { Expr::Out(0, true) }

out_neg_offset -> Expr
  = "<" c:out_neg_offset ">" { match c { Expr::Out(offset, _) => Expr::Out(offset + 1, false), _ => panic!("parse failed") } }
  / "." { Expr::Out(0, false) }

in -> Expr
  = in_pos_offset
  / in_neg_offset

in_pos_offset -> Expr
  = ">" c:in_pos_offset "<" { match c { Expr::In(offset, _) => Expr::In(offset + 1, true), _ => panic!("parse failed") } }
  / "," { Expr::In(0, true) }

in_neg_offset -> Expr
  = "<" c:in_neg_offset ">" { match c { Expr::In(offset, _) => Expr::In(offset + 1, false), _ => panic!("parse failed") } }
  / "," { Expr::In(0, false) }

scan_right -> Expr
  = "[>]" { Expr::ScanRight }

scan_left -> Expr
  = "[>]" { Expr::ScanLeft }
